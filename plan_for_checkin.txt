Plan for check in:

1. Literature Review:
Add some papers here
Add some medium articles here
Maybe even some gh repos

https://www.chessprogramming.org/Main_Page
https://www.youtube.com/watch?v=_vqlIPDR2TU&ab_channel=SebastianLague
https://arxiv.org/pdf/1712.01815
https://blogs.cornell.edu/info2040/2022/09/30/game-theory-how-stockfish-mastered-chess/
https://github.com/stanford-cs221/sample-projects/blob/master/arijitb-aparnak-chess.pdf
https://www.semanticscholar.org/paper/Learning-the-Piece-Values-for-Three-Chess-Variants-Droste-F%C3%BCrnkranz/964f515a40fb84cf01973a82f1cc01df033c062f
https://github.com/facebookresearch/minimax?tab=readme-ov-file


2. Dataset
what data set are we going to use?

Probably CCRL dataset?
https://lczero.org/blog/2018/09/a-standard-dataset/

3. Baseline with be minimax as depth 1?
Also we can use a very simple eval function with just counting piece weights?

4. Minimax to highest depth possible without many second slowdowns
5. For minimax- how do we learn a better eval function?
6. Metrics
Macro: Did we win the game vs lose vs draw?
Micro: How good was our move? Consult oracle (figure out where to get an oracle)

7. Future work would be neural net with supervised learning


Flynn:
 - figuring out how to not need to deep copy the board and also integrate moves into the current board position quickly.
 - This is important because one of the constraints on how deep we can go is processing time for a single move

Adhish:
 - Look into better evaluation functions
 - download stockfish

Seena:
 - Look into better evaluation functions

Prerna: Tried some evaluation functions enhancements:
1. A little more accurate piece values where bishop is slightly more valuable than knight
scoring=  {
    'p': -10,    # Black pawn
    'n': -33,    # Black knight
    'b': -38,    # Black bishop (slightly more valuable than knight)
    'r': -50,    # Black rook
    'q': -90,    # Black queen
    'k': 0,      # Black king
    'P': 10,     # White pawn
    'N': 33,     # White knight
    'B': 38,     # White bishop (slightly more valuable than knight)
    'R': 50,     # White rook
    'Q': 90,     # White queen
    'K': 0       # White king
    }

2. Evaluation function with better score if pawn is protecting the king (pawn shield) along with updated 

#Return higher positive score for shield in front of the king
def king_pawn_shield(board, king_square, is_white):
    shield_score = 0
    king_column = king_square % 8  #King Column
    king_row = king_square // 8 #Kind Row
    
    # Check left, center, right in front of the king
    for file in range(max(0, king_column - 1), min(8, king_column + 2)): #Confirming we are not going off the board while checking        
        if is_white: # For white king : check one and two ranks above as White pawns can only move upward and hence white pawns protect their king from ranks above them
            check_rows = [king_row + 1, king_row + 2] if king_row < 6 else [king_row + 1]
        else: # For black king : check one and two ranks below as Black pawns can only move downward and hence black pawns protect their king from ranks below them
            check_rows = [king_row - 1, king_row - 2] if king_row > 1 else [king_row - 1]
        
        for row in check_rows:
            if 0 <= row < 8:  # Ensuring row is on the board
                square = row * 8 + file 
                piece = board.piece_at(square)
                if piece and piece.symbol() == ('P' if is_white else 'p'):
                    shield_score += 10  # Adding points for each protecting pawn
    
    return shield_score

#simple evaluation function + King Pawn shield
def eval_board(BOARD):
    score = 0
    WHITE = True
    BLACK = False
    pieces = BOARD.piece_map()
    # pdb.set_trace()  # Set a breakpoint here
    for key in pieces:
        score += scoring[str(pieces[key])]
    
    # Adding Pawn shield evaluation to the simple evaluation function
    white_king_eval = BOARD.king(WHITE)
    black_king_eval = BOARD.king(BLACK)
    
    if white_king_eval is not None:
        score += king_pawn_shield(BOARD, white_king_eval, True)
    
    if black_king_eval is not None:
        score -= king_pawn_shield(BOARD, black_king_eval, False)
    
    return score


1. piece square table (Flynn)
2. pawn shield and pawn storm (Prerna)
3. trapped pieces (Adhish)
- if trapped pieces is too hard, King Tropism and Virtual Mobility






def eval_pawn_storm(piece_count, board):
    '''
    From https://www.chessprogramming.org/King_Safety
    If the enemy pawns are near to the king, there might be a threat of
    opening a file, even if the pawn shield is intact. Penalties for storming
    enemy pawns must be lower than penalties for (semi)open files,
    otherwise the pawn storm might backfire, resulting in a blockage.
    '''

    print("\n------------ Starting Pawn Storm Evaluation ------------")
    print(f"Current board position:\n{board}")
    print(f"Piece count: {piece_count}")
    
    white_king_square = None
    black_king_square = None
    for square in chess.SQUARES:
        piece = board.piece_at(square)
        if piece is not None:
            if piece.symbol() == 'K':
                white_king_square = square #Getting white kind position
                print(f"White king found at square: {chess.square_name(white_king_square)}")
            elif piece.symbol() == 'k':
                black_king_square = square #Getting black kind position
                print(f"Black king found at square: {chess.square_name(black_king_square)}")

    if white_king_square is None or black_king_square is None:
        print("Missing king(s), returning 0")
        return 0 #If either king is missing dont proceed


    print("\nEvaluating White's pawn storm:")
    white_storm_score = eval_side_storm(board, chess.WHITE, piece_count, white_king_square,
                                        black_king_square)
    print(f"White's storm score: {white_storm_score}")

    print("\nEvaluating Black's pawn storm...")
    black_storm_score = eval_side_storm(board, chess.BLACK, piece_count, black_king_square,
                                        white_king_square)
    print(f"Black's storm score: {black_storm_score}")
    
    pawn_storm_score = white_storm_score - black_storm_score
    print(f"\nFinal pawn storm score: {pawn_storm_score}")
    #pdb.set_trace()  

    return pawn_storm_score
